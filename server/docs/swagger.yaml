basePath: /
definitions:
  config.Captcha:
    properties:
      imgHeight:
        type: integer
      imgWidth:
        type: integer
      keyLong:
        type: integer
    type: object
  config.Casbin:
    properties:
      modelPath:
        type: string
    type: object
  config.Email:
    properties:
      from:
        type: string
      host:
        type: string
      isSSL:
        type: boolean
      nickname:
        type: string
      port:
        type: integer
      secret:
        type: string
      to:
        type: string
    type: object
  config.JWT:
    properties:
      signingKey:
        type: string
    type: object
  config.Local:
    properties:
      path:
        type: string
    type: object
  config.Mysql:
    properties:
      config:
        type: string
      dbname:
        type: string
      logMode:
        type: boolean
      maxIdleConns:
        type: integer
      maxOpenConns:
        type: integer
      password:
        type: string
      path:
        type: string
      username:
        type: string
    type: object
  config.Nginx:
    properties:
      CertPath:
        type: string
      ConfigPath:
        type: string
    type: object
  config.Redis:
    properties:
      addr:
        type: string
      db:
        type: integer
      password:
        type: string
    type: object
  config.SSH:
    properties:
      privateKey:
        type: string
      publicKey:
        type: string
    type: object
  config.Server:
    properties:
      captcha:
        $ref: '#/definitions/config.Captcha'
      casbin:
        $ref: '#/definitions/config.Casbin'
      email:
        $ref: '#/definitions/config.Email'
      jwt:
        $ref: '#/definitions/config.JWT'
      local:
        $ref: '#/definitions/config.Local'
        description: oss
      mysql:
        $ref: '#/definitions/config.Mysql'
        description: gorm
      nginx:
        $ref: '#/definitions/config.Nginx'
      redis:
        $ref: '#/definitions/config.Redis'
      ssh:
        $ref: '#/definitions/config.SSH'
      system:
        $ref: '#/definitions/config.System'
      zap:
        $ref: '#/definitions/config.Zap'
    type: object
  config.System:
    properties:
      addr:
        type: integer
      dbType:
        type: string
      env:
        type: string
      ossType:
        type: string
      useMultipoint:
        type: boolean
    type: object
  config.Zap:
    properties:
      director:
        type: string
      encodeLevel:
        type: string
      format:
        type: string
      level:
        type: string
      linkName:
        type: string
      logInConsole:
        type: boolean
      prefix:
        type: string
      showLine:
        type: boolean
      stacktraceKey:
        type: string
    type: object
  model.AutoCodeStruct:
    properties:
      abbreviation:
        type: string
      autoConfig:
        $ref: '#/definitions/model.AutoConfigStruct'
      autoCreateApiToSql:
        type: boolean
      autoMoveFile:
        type: boolean
      description:
        type: string
      fields:
        items:
          $ref: '#/definitions/model.Field'
        type: array
      packageName:
        type: string
      structName:
        type: string
      tableName:
        type: string
    type: object
  model.AutoConfigStruct:
    properties:
      Domain:
        $ref: '#/definitions/model.NginxDomain'
      Pools:
        additionalProperties:
          $ref: '#/definitions/model.PoolConfig'
        type: object
      Rules:
        items:
          $ref: '#/definitions/model.RuleConfig'
        type: array
    type: object
  model.DomainRule:
    properties:
      Domain:
        $ref: '#/definitions/model.NginxDomain'
      DomainId:
        type: integer
      HttpsRewrite:
        type: string
      MatchType:
        type: string
      Path:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.DomainRuleIns:
    properties:
      InsType:
        type: string
      InsValue:
        type: string
      Rule:
        $ref: '#/definitions/model.DomainRule'
      RuleId:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.ExaCustomer:
    properties:
      createdAt:
        type: string
      customerName:
        type: string
      customerPhoneData:
        type: string
      id:
        type: integer
      sysUser:
        $ref: '#/definitions/model.SysUser'
      sysUserAuthorityID:
        type: string
      sysUserId:
        type: integer
      updatedAt:
        type: string
    type: object
  model.ExaFileUploadAndDownload:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      key:
        type: string
      name:
        type: string
      tag:
        type: string
      updatedAt:
        type: string
      url:
        type: string
    type: object
  model.Field:
    properties:
      columnName:
        type: string
      comment:
        type: string
      dataType:
        type: string
      dataTypeLong:
        type: string
      dictType:
        type: string
      fieldDesc:
        type: string
      fieldJson:
        type: string
      fieldName:
        type: string
      fieldSearchType:
        type: string
      fieldType:
        type: string
    type: object
  model.NginxCluster:
    properties:
      ClusterName:
        type: string
      Department:
        type: string
      Vip:
        type: string
      authority:
        $ref: '#/definitions/model.SysAuthority'
      authorityId:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.NginxDomain:
    properties:
      Domain:
        type: string
      DomainName:
        type: string
      HttpsCert:
        type: string
      HttpsPort:
        type: string
      HttpsRewrite:
        type: string
      Nginx:
        type: integer
      NginxCluster:
        $ref: '#/definitions/model.NginxPool'
      Pool:
        type: integer
      PoolCluster:
        $ref: '#/definitions/model.NginxPool'
      Port:
        type: string
      UseHttps:
        type: boolean
      createdAt:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.NginxDomainCert:
    properties:
      CertName:
        type: string
      Deadline:
        type: string
      Dns:
        type: string
      Issued:
        type: string
      Validity:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.NginxNode:
    properties:
      Cluster:
        $ref: '#/definitions/model.NginxCluster'
      ClusterId:
        type: integer
      IP:
        type: string
      NodeName:
        type: string
      Passwd:
        type: string
      Port:
        type: string
      Status:
        type: string
      UserName:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.NginxPool:
    properties:
      CheckInterval:
        type: integer
      CheckTimeout:
        type: integer
      CheckType:
        type: string
      Keepalive:
        type: integer
      Policy:
        type: string
      PoolName:
        type: string
      authority:
        $ref: '#/definitions/model.SysAuthority'
      authorityId:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.PoolConfig:
    properties:
      Pool:
        $ref: '#/definitions/model.NginxPool'
      PoolNodes:
        items:
          $ref: '#/definitions/model.PoolNode'
        type: array
    type: object
  model.PoolNode:
    properties:
      Cluster:
        $ref: '#/definitions/model.NginxPool'
      ClusterId:
        type: integer
      IP:
        type: string
      MaxFailed:
        type: string
      NodeName:
        type: string
      Port:
        type: string
      Status:
        type: string
      TimeOut:
        type: string
      Weight:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.PublishHistory:
    properties:
      ClusterId:
        type: integer
      Comment:
        type: string
      Config:
        type: string
      Domain:
        $ref: '#/definitions/model.NginxDomain'
      DomainId:
        type: integer
      Operate:
        type: string
      Status:
        type: string
      Type:
        type: string
      User:
        type: string
      Uuid:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  model.RuleConfig:
    properties:
      Ins:
        items:
          $ref: '#/definitions/model.DomainRuleIns'
        type: array
      Pool:
        $ref: '#/definitions/model.NginxPool'
      Rule:
        $ref: '#/definitions/model.DomainRule'
    type: object
  model.SysApi:
    properties:
      apiGroup:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      method:
        type: string
      path:
        type: string
      updatedAt:
        type: string
    type: object
  model.SysAuthority:
    properties:
      authorityId:
        type: string
      authorityName:
        type: string
      children:
        items:
          $ref: '#/definitions/model.SysAuthority'
        type: array
      createdAt:
        type: string
      dataAuthorityId:
        items:
          $ref: '#/definitions/model.SysAuthority'
        type: array
      deletedAt:
        type: string
      menus:
        items:
          $ref: '#/definitions/model.SysBaseMenu'
        type: array
      parentId:
        type: string
      updatedAt:
        type: string
    type: object
  model.SysBaseMenu:
    properties:
      authoritys:
        items:
          $ref: '#/definitions/model.SysAuthority'
        type: array
      children:
        items:
          $ref: '#/definitions/model.SysBaseMenu'
        type: array
      component:
        type: string
      createdAt:
        type: string
      defaultMenu:
        type: boolean
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: integer
      keepAlive:
        type: boolean
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/model.SysBaseMenuParameter'
        type: array
      parentId:
        type: string
      path:
        type: string
      sort:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
    type: object
  model.SysBaseMenuParameter:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      key:
        type: string
      sysBaseMenuID:
        type: integer
      type:
        type: string
      updatedAt:
        type: string
      value:
        type: string
    type: object
  model.SysDictionary:
    properties:
      createdAt:
        type: string
      desc:
        type: string
      id:
        type: integer
      name:
        type: string
      status:
        type: boolean
      sysDictionaryDetails:
        items:
          $ref: '#/definitions/model.SysDictionaryDetail'
        type: array
      type:
        type: string
      updatedAt:
        type: string
    type: object
  model.SysDictionaryDetail:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      label:
        type: string
      sort:
        type: integer
      status:
        type: boolean
      sysDictionaryID:
        type: integer
      updatedAt:
        type: string
      value:
        type: integer
    type: object
  model.SysOperationRecord:
    properties:
      agent:
        description: Latency      time.Duration `json:"latency" form:"latency" gorm:"column:latency;comment:延迟"`
        type: string
      body:
        type: string
      createdAt:
        type: string
      error_message:
        type: string
      id:
        type: integer
      ip:
        type: string
      method:
        type: string
      path:
        type: string
      resp:
        type: string
      status:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.SysUser'
      user_id:
        type: integer
    type: object
  model.SysUser:
    properties:
      authority:
        $ref: '#/definitions/model.SysAuthority'
      authorityId:
        type: string
      createdAt:
        type: string
      headerImg:
        type: string
      id:
        type: integer
      nickName:
        type: string
      updatedAt:
        type: string
      userName:
        type: string
      uuid:
        type: string
    type: object
  model.SysWorkflow:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
      workflowDescription:
        description: 工作流描述
        type: string
      workflowName:
        description: 工作流英文id
        type: string
      workflowNickName:
        description: 工作流名称
        type: string
      workflowStep:
        description: 工作流步骤
        items:
          $ref: '#/definitions/model.SysWorkflowStepInfo'
        type: array
    type: object
  model.SysWorkflowStepInfo:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      isEnd:
        description: 是否是完结流节点
        type: boolean
      isStart:
        description: 是否是开始流节点
        type: boolean
      stepAuthorityID:
        description: 操作者级别id
        type: string
      stepName:
        description: 工作流名称
        type: string
      stepNo:
        description: 步骤id （第几步）
        type: number
      updatedAt:
        type: string
      workflowID:
        description: 所属工作流ID
        type: integer
    type: object
  model.System:
    properties:
      config:
        $ref: '#/definitions/config.Server'
    type: object
  request.AddMenuAuthorityInfo:
    properties:
      authorityId:
        type: string
      menus:
        items:
          $ref: '#/definitions/model.SysBaseMenu'
        type: array
    type: object
  request.CasbinInReceive:
    properties:
      authorityId:
        type: string
      casbinInfos:
        items:
          $ref: '#/definitions/request.CasbinInfo'
        type: array
    type: object
  request.CasbinInfo:
    properties:
      method:
        type: string
      path:
        type: string
    type: object
  request.ChangePasswordStruct:
    properties:
      newPassword:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  request.DomainRuleInsSearch:
    properties:
      InsType:
        type: string
      InsValue:
        type: string
      Rule:
        $ref: '#/definitions/model.DomainRule'
      RuleId:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      page:
        type: integer
      pageSize:
        type: integer
      updatedAt:
        type: string
    type: object
  request.DomainRuleSearch:
    properties:
      Domain:
        $ref: '#/definitions/model.NginxDomain'
      DomainId:
        type: integer
      HttpsRewrite:
        type: string
      MatchType:
        type: string
      Path:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      page:
        type: integer
      pageSize:
        type: integer
      updatedAt:
        type: string
    type: object
  request.Empty:
    type: object
  request.GetAuthorityId:
    properties:
      authorityId:
        type: string
    type: object
  request.GetById:
    properties:
      id:
        type: number
    type: object
  request.IdsReq:
    properties:
      ids:
        items:
          type: integer
        type: array
    type: object
  request.Login:
    properties:
      captcha:
        type: string
      captchaId:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  request.NginxClusterSearch:
    properties:
      ClusterName:
        type: string
      Department:
        type: string
      Vip:
        type: string
      authority:
        $ref: '#/definitions/model.SysAuthority'
      authorityId:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      page:
        type: integer
      pageSize:
        type: integer
      updatedAt:
        type: string
    type: object
  request.NginxDomainCertSearch:
    properties:
      CertName:
        type: string
      Deadline:
        type: string
      Dns:
        type: string
      Issued:
        type: string
      Validity:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      page:
        type: integer
      pageSize:
        type: integer
      updatedAt:
        type: string
    type: object
  request.NginxNodeSearch:
    properties:
      Cluster:
        $ref: '#/definitions/model.NginxCluster'
      ClusterId:
        type: integer
      IP:
        type: string
      NodeName:
        type: string
      Passwd:
        type: string
      Port:
        type: string
      Status:
        type: string
      UserName:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      page:
        type: integer
      pageSize:
        type: integer
      updatedAt:
        type: string
    type: object
  request.NginxPoolSearch:
    properties:
      CheckInterval:
        type: integer
      CheckTimeout:
        type: integer
      CheckType:
        type: string
      Keepalive:
        type: integer
      Policy:
        type: string
      PoolName:
        type: string
      authority:
        $ref: '#/definitions/model.SysAuthority'
      authorityId:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      page:
        type: integer
      pageSize:
        type: integer
      updatedAt:
        type: string
    type: object
  request.PageInfo:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
    type: object
  request.PoolNodeSearch:
    properties:
      Cluster:
        $ref: '#/definitions/model.NginxPool'
      ClusterId:
        type: integer
      IP:
        type: string
      MaxFailed:
        type: string
      NodeName:
        type: string
      Port:
        type: string
      Status:
        type: string
      TimeOut:
        type: string
      Weight:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      page:
        type: integer
      pageSize:
        type: integer
      updatedAt:
        type: string
    type: object
  request.PublishHistorySearch:
    properties:
      ClusterId:
        type: integer
      Comment:
        type: string
      Config:
        type: string
      Domain:
        $ref: '#/definitions/model.NginxDomain'
      DomainId:
        type: integer
      Operate:
        type: string
      Status:
        type: string
      Type:
        type: string
      User:
        type: string
      Uuid:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      page:
        type: integer
      pageSize:
        type: integer
      updatedAt:
        type: string
    type: object
  request.SearchApiParams:
    properties:
      apiGroup:
        type: string
      createdAt:
        type: string
      desc:
        type: boolean
      description:
        type: string
      id:
        type: integer
      method:
        type: string
      orderKey:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      path:
        type: string
      updatedAt:
        type: string
    type: object
  request.SetUserAuth:
    properties:
      authorityId:
        type: string
      uuid:
        type: string
    type: object
  request.SysDictionaryDetailSearch:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      label:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      sort:
        type: integer
      status:
        type: boolean
      sysDictionaryID:
        type: integer
      updatedAt:
        type: string
      value:
        type: integer
    type: object
  request.SysDictionarySearch:
    properties:
      createdAt:
        type: string
      desc:
        type: string
      id:
        type: integer
      name:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      status:
        type: boolean
      sysDictionaryDetails:
        items:
          $ref: '#/definitions/model.SysDictionaryDetail'
        type: array
      type:
        type: string
      updatedAt:
        type: string
    type: object
  request.SysOperationRecordSearch:
    properties:
      agent:
        description: Latency      time.Duration `json:"latency" form:"latency" gorm:"column:latency;comment:延迟"`
        type: string
      body:
        type: string
      createdAt:
        type: string
      error_message:
        type: string
      id:
        type: integer
      ip:
        type: string
      method:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      path:
        type: string
      resp:
        type: string
      status:
        type: integer
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/model.SysUser'
      user_id:
        type: integer
    type: object
  response.SysAuthorityCopyResponse:
    properties:
      authority:
        $ref: '#/definitions/model.SysAuthority'
      oldAuthorityId:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample Server pets
  title: Swagger Example API
  version: 0.0.1
paths:
  /Cert/createNginxDomainCert:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建NginxDomainCert
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxDomainCert'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建NginxDomainCert
      tags:
      - NginxDomainCert
  /Cert/deleteNginxDomainCert:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除NginxDomainCert
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxDomainCert'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除NginxDomainCert
      tags:
      - NginxDomainCert
  /Cert/deleteNginxDomainCertByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除NginxDomainCert
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除NginxDomainCert
      tags:
      - NginxDomainCert
  /Cert/findNginxDomainCert:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询NginxDomainCert
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxDomainCert'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询NginxDomainCert
      tags:
      - NginxDomainCert
  /Cert/getNginxDomainCertList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 分页获取NginxDomainCert列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.NginxDomainCertSearch'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取NginxDomainCert列表
      tags:
      - NginxDomainCert
  /Cert/updateNginxDomainCert:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新NginxDomainCert
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxDomainCert'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新NginxDomainCert
      tags:
      - NginxDomainCert
  /Cluster/createNginxCluster:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建NginxCluster
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxCluster'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建NginxCluster
      tags:
      - NginxCluster
  /Cluster/deleteNginxCluster:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除NginxCluster
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxCluster'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除NginxCluster
      tags:
      - NginxCluster
  /Cluster/deleteNginxClusterByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除NginxCluster
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除NginxCluster
      tags:
      - NginxCluster
  /Cluster/findNginxCluster:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询NginxCluster
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxCluster'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询NginxCluster
      tags:
      - NginxCluster
  /Cluster/getNginxClusterList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 分页获取NginxCluster列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.NginxClusterSearch'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取NginxCluster列表
      tags:
      - NginxCluster
  /Cluster/updateNginxCluster:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新NginxCluster
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxCluster'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新NginxCluster
      tags:
      - NginxCluster
  /Domain/createNginxDomain:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建NginxDomain
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxDomain'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建NginxDomain
      tags:
      - NginxDomain
  /Domain/deleteNginxDomain:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除NginxDomain
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxDomain'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除NginxDomain
      tags:
      - NginxDomain
  /Domain/deleteNginxDomainByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除NginxDomain
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除NginxDomain
      tags:
      - NginxDomain
  /Domain/findNginxDomain:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询NginxDomain
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxDomain'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询NginxDomain
      tags:
      - NginxDomain
  /Domain/updateNginxDomain:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新NginxDomain
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxDomain'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新NginxDomain
      tags:
      - NginxDomain
  /History/createPublishHistory:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建PublishHistory
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.PublishHistory'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建PublishHistory
      tags:
      - PublishHistory
  /History/deletePublishHistory:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除PublishHistory
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.PublishHistory'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除PublishHistory
      tags:
      - PublishHistory
  /History/deletePublishHistoryByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除PublishHistory
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除PublishHistory
      tags:
      - PublishHistory
  /History/findPublishHistory:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询PublishHistory
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.PublishHistory'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询PublishHistory
      tags:
      - PublishHistory
  /History/getPublishHistoryList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 分页获取PublishHistory列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.PublishHistorySearch'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取PublishHistory列表
      tags:
      - PublishHistory
  /History/updatePublishHistory:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新PublishHistory
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.PublishHistory'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新PublishHistory
      tags:
      - PublishHistory
  /Ins/createDomainRuleIns:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建DomainRuleIns
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.DomainRuleIns'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建DomainRuleIns
      tags:
      - DomainRuleIns
  /Ins/deleteDomainRuleIns:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除DomainRuleIns
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.DomainRuleIns'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除DomainRuleIns
      tags:
      - DomainRuleIns
  /Ins/deleteDomainRuleInsByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除DomainRuleIns
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除DomainRuleIns
      tags:
      - DomainRuleIns
  /Ins/findDomainRuleIns:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询DomainRuleIns
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.DomainRuleIns'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询DomainRuleIns
      tags:
      - DomainRuleIns
  /Ins/getDomainRuleInsList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 分页获取DomainRuleIns列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.DomainRuleInsSearch'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取DomainRuleIns列表
      tags:
      - DomainRuleIns
  /Ins/updateDomainRuleIns:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新DomainRuleIns
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.DomainRuleIns'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新DomainRuleIns
      tags:
      - DomainRuleIns
  /Node/createNginxNode:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建NginxNode
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxNode'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建NginxNode
      tags:
      - NginxNode
  /Node/deleteNginxNode:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除NginxNode
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxNode'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除NginxNode
      tags:
      - NginxNode
  /Node/deleteNginxNodeByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除NginxNode
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除NginxNode
      tags:
      - NginxNode
  /Node/findNginxNode:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询NginxNode
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxNode'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询NginxNode
      tags:
      - NginxNode
  /Node/getNginxNodeList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 获取NginxNode列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.NginxNodeSearch'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取NginxNode列表
      tags:
      - NginxNode
  /Node/updateNginxNode:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新NginxNode
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxNode'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新NginxNode
      tags:
      - NginxNode
  /PNode/createPoolNode:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建PoolNode
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.PoolNode'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建PoolNode
      tags:
      - PoolNode
  /PNode/deletePoolNode:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除PoolNode
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.PoolNode'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除PoolNode
      tags:
      - PoolNode
  /PNode/deletePoolNodeByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除PoolNode
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除PoolNode
      tags:
      - PoolNode
  /PNode/findPoolNode:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询PoolNode
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.PoolNode'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询PoolNode
      tags:
      - PoolNode
  /PNode/getPoolNodeList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 分页获取PoolNode列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.PoolNodeSearch'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取PoolNode列表
      tags:
      - PoolNode
  /PNode/updatePoolNode:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新PoolNode
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.PoolNode'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新PoolNode
      tags:
      - PoolNode
  /Pool/createNginxPool:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建NginxPool
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxPool'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建NginxPool
      tags:
      - NginxPool
  /Pool/deleteNginxPool:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除NginxPool
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxPool'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除NginxPool
      tags:
      - NginxPool
  /Pool/deleteNginxPoolByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除NginxPool
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除NginxPool
      tags:
      - NginxPool
  /Pool/findNginxPool:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询NginxPool
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxPool'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询NginxPool
      tags:
      - NginxPool
  /Pool/getNginxPoolList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 分页获取NginxPool列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.NginxPoolSearch'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取NginxPool列表
      tags:
      - NginxPool
  /Pool/updateNginxPool:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新NginxPool
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.NginxPool'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新NginxPool
      tags:
      - NginxPool
  /Rule/createDomainRule:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建DomainRule
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.DomainRule'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建DomainRule
      tags:
      - DomainRule
  /Rule/deleteDomainRule:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除DomainRule
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.DomainRule'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除DomainRule
      tags:
      - DomainRule
  /Rule/deleteDomainRuleByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除DomainRule
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除DomainRule
      tags:
      - DomainRule
  /Rule/findDomainRule:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询DomainRule
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.DomainRule'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询DomainRule
      tags:
      - DomainRule
  /Rule/getDomainRuleList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 分页获取DomainRule列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.DomainRuleSearch'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取DomainRule列表
      tags:
      - DomainRule
  /Rule/updateDomainRule:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新DomainRule
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.DomainRule'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新DomainRule
      tags:
      - DomainRule
  /api/createApi:
    post:
      consumes:
      - application/json
      parameters:
      - description: api路径, api中文描述, api组, 方法
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysApi'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建基础api
      tags:
      - SysApi
  /api/deleteApi:
    post:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysApi'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除api
      tags:
      - SysApi
  /api/getAllApis:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取所有的Api 不分页
      tags:
      - SysApi
  /api/getApiById:
    post:
      consumes:
      - application/json
      parameters:
      - description: 根据id获取api
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.GetById'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 根据id获取api
      tags:
      - SysApi
  /api/getApiList:
    post:
      consumes:
      - application/json
      parameters:
      - description: 分页获取API列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.SearchApiParams'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取API列表
      tags:
      - SysApi
  /api/updateApi:
    post:
      consumes:
      - application/json
      parameters:
      - description: api路径, api中文描述, api组, 方法
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysApi'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"修改成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建基础api
      tags:
      - SysApi
  /authority/copyAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 旧角色id, 新权限id, 新权限名, 新父角色id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/response.SysAuthorityCopyResponse'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"拷贝成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 拷贝角色
      tags:
      - Authority
  /authority/createAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 权限id, 权限名, 父角色id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysAuthority'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建角色
      tags:
      - Authority
  /authority/deleteAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 删除角色
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysAuthority'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除角色
      tags:
      - Authority
  /authority/getAuthorityList:
    post:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取角色列表
      tags:
      - Authority
  /authority/setDataAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 设置角色资源权限
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysAuthority'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"设置成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 设置角色资源权限
      tags:
      - Authority
  /authority/updateAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 权限id, 权限名, 父角色id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysAuthority'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新角色信息
      tags:
      - Authority
  /autoCode/createTemp:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建自动代码
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.AutoCodeStruct'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 自动代码模板
      tags:
      - AutoCode
  /autoCode/getColumn:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取当前表所有字段
      tags:
      - AutoCode
  /autoCode/getDatabase:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取当前所有数据库
      tags:
      - AutoCode
  /autoCode/getTables:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取当前数据库所有表
      tags:
      - AutoCode
  /base/captcha:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"验证码获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 生成验证码
      tags:
      - Base
  /base/login:
    post:
      parameters:
      - description: 用户名, 密码, 验证码
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.Login'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"登陆成功"}'
          schema:
            type: string
      summary: 用户登录
      tags:
      - Base
  /casbin/UpdateCasbin:
    post:
      consumes:
      - application/json
      parameters:
      - description: 权限id, 权限模型列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CasbinInReceive'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新角色api权限
      tags:
      - Casbin
  /casbin/getPolicyPathByAuthorityId:
    post:
      consumes:
      - application/json
      parameters:
      - description: 权限id, 权限模型列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CasbinInReceive'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取权限列表
      tags:
      - Casbin
  /customer/customer:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 客户ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ExaCustomer'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除客户
      tags:
      - ExaCustomer
    get:
      consumes:
      - application/json
      parameters:
      - description: 客户ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ExaCustomer'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取单一客户信息
      tags:
      - ExaCustomer
    post:
      consumes:
      - application/json
      parameters:
      - description: 客户用户名, 客户手机号码
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ExaCustomer'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建客户
      tags:
      - ExaCustomer
    put:
      consumes:
      - application/json
      parameters:
      - description: 客户ID, 客户信息
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ExaCustomer'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新客户信息
      tags:
      - ExaCustomer
  /customer/customerList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取权限客户列表
      tags:
      - ExaCustomer
  /email/emailTest:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"发送成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 发送测试邮件
      tags:
      - System
  /fileUploadAndDownload/breakpointContinue:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: an example for breakpoint resume, 断点续传示例
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"切片创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 断点续传到服务器
      tags:
      - ExaFileUploadAndDownload
  /fileUploadAndDownload/deleteFile:
    post:
      parameters:
      - description: 传入文件里面id即可
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ExaFileUploadAndDownload'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除文件
      tags:
      - ExaFileUploadAndDownload
  /fileUploadAndDownload/findFile:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: 上传文件完成
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"file uploaded, 文件创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建文件
      tags:
      - ExaFileUploadAndDownload
  /fileUploadAndDownload/getFileList:
    post:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页文件列表
      tags:
      - ExaFileUploadAndDownload
  /fileUploadAndDownload/removeChunk:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: 删除缓存切片
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"缓存切片删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除切片
      tags:
      - ExaFileUploadAndDownload
  /fileUploadAndDownload/upload:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: 上传文件示例
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"上传成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 上传文件示例
      tags:
      - ExaFileUploadAndDownload
  /jwt/jsonInBlacklist:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"拉黑成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: jwt加入黑名单
      tags:
      - Jwt
  /menu/GetMenuAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 角色ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.GetAuthorityId'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取指定角色menu
      tags:
      - AuthorityMenu
  /menu/addBaseMenu:
    post:
      consumes:
      - application/json
      parameters:
      - description: 路由path, 父菜单ID, 路由name, 对应前端文件路径, 排序标记
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysBaseMenu'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"添加成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 新增菜单
      tags:
      - Menu
  /menu/addMenuAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 角色ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.AddMenuAuthorityInfo'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"添加成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 增加menu和角色关联关系
      tags:
      - AuthorityMenu
  /menu/deleteBaseMenu:
    post:
      consumes:
      - application/json
      parameters:
      - description: 菜单id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.GetById'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除菜单
      tags:
      - Menu
  /menu/getBaseMenuById:
    post:
      consumes:
      - application/json
      parameters:
      - description: 菜单id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.GetById'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 根据id获取菜单
      tags:
      - Menu
  /menu/getBaseMenuTree:
    post:
      parameters:
      - description: 空
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.Empty'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取用户动态路由
      tags:
      - AuthorityMenu
  /menu/getMenu:
    post:
      parameters:
      - description: 空
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.Empty'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取用户动态路由
      tags:
      - AuthorityMenu
  /menu/getMenuList:
    post:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取基础menu列表
      tags:
      - Menu
  /menu/updateBaseMenu:
    post:
      consumes:
      - application/json
      parameters:
      - description: 路由path, 父菜单ID, 路由name, 对应前端文件路径, 排序标记
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysBaseMenu'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新菜单
      tags:
      - Menu
  /simpleUploader/checkFileMd5:
    get:
      parameters:
      - description: md5
        in: query
        name: md5
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 断点续传插件版示例
      tags:
      - SimpleUploader
  /simpleUploader/mergeFileMd5:
    get:
      parameters:
      - description: md5
        in: query
        name: md5
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"合并成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 合并文件
      tags:
      - SimpleUploader
  /simpleUploader/upload:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: 断点续传插件版示例
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"切片创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 断点续传插件版示例
      tags:
      - SimpleUploader
  /sysDictionary/createSysDictionary:
    post:
      consumes:
      - application/json
      parameters:
      - description: SysDictionary模型
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysDictionary'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建SysDictionary
      tags:
      - SysDictionary
  /sysDictionary/deleteSysDictionary:
    delete:
      consumes:
      - application/json
      parameters:
      - description: SysDictionary模型
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysDictionary'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除SysDictionary
      tags:
      - SysDictionary
  /sysDictionary/findSysDictionary:
    get:
      consumes:
      - application/json
      parameters:
      - description: ID或字典英名
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysDictionary'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询SysDictionary
      tags:
      - SysDictionary
  /sysDictionary/getSysDictionaryList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小, 搜索条件
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.SysDictionarySearch'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取SysDictionary列表
      tags:
      - SysDictionary
  /sysDictionary/updateSysDictionary:
    put:
      consumes:
      - application/json
      parameters:
      - description: SysDictionary模型
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysDictionary'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新SysDictionary
      tags:
      - SysDictionary
  /sysDictionaryDetail/createSysDictionaryDetail:
    post:
      consumes:
      - application/json
      parameters:
      - description: SysDictionaryDetail模型
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysDictionaryDetail'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建SysDictionaryDetail
      tags:
      - SysDictionaryDetail
  /sysDictionaryDetail/deleteSysDictionaryDetail:
    delete:
      consumes:
      - application/json
      parameters:
      - description: SysDictionaryDetail模型
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysDictionaryDetail'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除SysDictionaryDetail
      tags:
      - SysDictionaryDetail
  /sysDictionaryDetail/findSysDictionaryDetail:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询SysDictionaryDetail
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysDictionaryDetail'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询SysDictionaryDetail
      tags:
      - SysDictionaryDetail
  /sysDictionaryDetail/getSysDictionaryDetailList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小, 搜索条件
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.SysDictionaryDetailSearch'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取SysDictionaryDetail列表
      tags:
      - SysDictionaryDetail
  /sysDictionaryDetail/updateSysDictionaryDetail:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新SysDictionaryDetail
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysDictionaryDetail'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新SysDictionaryDetail
      tags:
      - SysDictionaryDetail
  /sysOperationRecord/createSysOperationRecord:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建SysOperationRecord
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysOperationRecord'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建SysOperationRecord
      tags:
      - SysOperationRecord
  /sysOperationRecord/deleteSysOperationRecord:
    delete:
      consumes:
      - application/json
      parameters:
      - description: SysOperationRecord模型
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysOperationRecord'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除SysOperationRecord
      tags:
      - SysOperationRecord
  /sysOperationRecord/deleteSysOperationRecordByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除SysOperationRecord
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除SysOperationRecord
      tags:
      - SysOperationRecord
  /sysOperationRecord/findSysOperationRecord:
    get:
      consumes:
      - application/json
      parameters:
      - description: Id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysOperationRecord'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询SysOperationRecord
      tags:
      - SysOperationRecord
  /sysOperationRecord/getSysOperationRecordList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小, 搜索条件
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.SysOperationRecordSearch'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取SysOperationRecord列表
      tags:
      - SysOperationRecord
  /system/ReloadSystem:
    post:
      parameters:
      - description: 重启系统
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.System'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"重启系统成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 重启系统
      tags:
      - System
  /system/getServerInfo:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取服务器信息
      tags:
      - System
  /system/getSystemConfig:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取配置文件内容
      tags:
      - System
  /system/setSystemConfig:
    post:
      parameters:
      - description: 设置配置文件内容
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.System'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"设置成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 设置配置文件内容
      tags:
      - System
  /user/changePassword:
    put:
      parameters:
      - description: 用户名, 原密码, 新密码
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.ChangePasswordStruct'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"修改成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用户修改密码
      tags:
      - SysUser
  /user/deleteUser:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 用户ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.GetById'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除用户
      tags:
      - SysUser
  /user/getUserList:
    post:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取用户列表
      tags:
      - SysUser
  /user/register:
    post:
      parameters:
      - description: 用户名, 昵称, 密码, 角色ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysUser'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"注册成功"}'
          schema:
            type: string
      summary: 用户注册账号
      tags:
      - SysUser
  /user/setUserAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 用户UUID, 角色ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.SetUserAuth'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"修改成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 设置用户权限
      tags:
      - SysUser
  /user/setUserInfo:
    put:
      consumes:
      - application/json
      parameters:
      - description: ID, 用户名, 昵称, 头像链接
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysUser'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"设置成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 设置用户信息
      tags:
      - SysUser
  /workflow/createWorkFlow:
    post:
      parameters:
      - description: 注册工作流接口
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysWorkflow'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"注册成功"}'
          schema:
            type: string
      summary: 注册工作流
      tags:
      - workflow
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: x-token
    type: apiKey
swagger: "2.0"
